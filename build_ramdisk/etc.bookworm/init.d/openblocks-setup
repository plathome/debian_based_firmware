#!/bin/bash
### BEGIN INIT INFO
# Provides:          openblocks-setup
# Required-Start:
# Required-Stop:
# Default-Start:
# Default-Stop:      0 6
# Short-Description: Config storage area for OpenBlocks
# Description:
### END INIT INFO
#
# Copyright (c) 2013-2022 Plat'Home CO., LTD.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY PLAT'HOME CO., LTD. AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL PLAT'HOME CO., LTD. AND CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

DESC="filesystem layout configuration"
NAME="openblocks-setup"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#set -x

[ -f /etc/default/openblocks ] && . /etc/default/openblocks

echo -e "\033[0m"

RW_DIR="${RW_DIR:=/.rw}"
RO_DIR="${RO_DIR:=/.ro}"
RW_CF_LABEL="${RW_CF_LABEL:=DEBIAN}"
RO_CF_LABEL="${RO_CF_LABEL:=ROBIAN}"
CONFIG_LABEL="${CONFIG_LABEL:=DEB_CONFIG}"
CONFIG_DEV_MTPT="${CONFIG_DEV_MTPT:=/mnt}"
CONFIG_FILE=userland.tgz
CONFIG_SCRIPT=init.sh
CONFIG_POSTSCRIPT=post-init.sh
MTREE_LIST="${MTREE_LIST:=/etc/mtree.list}"
MTREE_DIRS="${MTREE_DIRS:=/var/log /var/run}"

restore_func(){
	WORK_DIR=/tmp/_tmpfs.$$

	mkdir -p ${WORK_DIR}
	case $MODEL in
	obsvx1|obsix9|obshx?)
		mount `findfs LABEL=${SAVE_DIR}` ${WORK_DIR} -r
		;;
	*)
		mount ${SAVE_DIR} ${WORK_DIR} -r
		;;
	esac
	echo -n "Extract userland files... "
	if (tar xpzmf ${WORK_DIR}/userland.tgz -C ${RW_DIR} > /dev/null 2>&1); then
		echo "done."
	else
		echo "fail(or empty)."
	fi
	echo -n "Extract /etc files... "
	if (tar xpzmf ${WORK_DIR}/etc.tgz -C ${RW_DIR} > /dev/null 2>&1); then
		echo "done."
	else
		echo "fail(or empty)."
	fi
	umount ${WORK_DIR}
	rm -rf ${WORK_DIR}
	return 0
}

if_exists_execute_config_postscript(){
	if [ -f "${CONFIG_DEV_MTPT}/${CONFIG_POSTSCRIPT}" ] ; then
		bash ${CONFIG_DEV_MTPT}/${CONFIG_POSTSCRIPT}
	fi
	return 0
}

if_exists_execute_config_script(){
	if [ -f "${CONFIG_DEV_MTPT}/${CONFIG_SCRIPT}" ] ; then
		bash ${CONFIG_DEV_MTPT}/${CONFIG_SCRIPT}
	fi
	return 0
}

if_exists_extract_config_file(){
	if [ -f "${CONFIG_DEV_MTPT}/${CONFIG_FILE}" ] ; then
		echo -n "Extract config files from LABEL=$CONFIG_LABEL device... "
		if tar -xpzf ${CONFIG_DEV_MTPT}/${CONFIG_FILE} -C ${RW_DIR};then
			echo "done."
		else
			echo "fail(or empty)."
		fi
	fi
	return 0
}

fdisk_and_mke2fs(){
	dev=$1
	sfdisk ${dev%[0-9]} <<-_FDISK
,,83,-
	_FDISK
	mkfs.ext4 -L ${RW_CF_LABEL} $dev
	return 0
}

mkdir_mtree_list() {
	if [ -s ${MTREE_LIST} ]; then
		cat ${MTREE_LIST} | while read line;do
			owner=`echo $line|cut -d':' -f1`
			group=`echo $line|cut -d':' -f2`
			dir=`echo $line|cut -d':' -f3`
			mkdir -p ${dir}
			chown ${owner}:${group} ${dir}
		done
	fi
}

# merge from /var/lib/dpkg/info/openssh-server.postinst
# get_config_option, host_keys_required, create_key, create_keys
sshd_get_config_option() {
	option="$1"

	[ -f /etc/ssh/sshd_config ] || return

	# TODO: actually only one '=' allowed after option
	perl -lne 's/\s+/ /g; print if s/^\s*'"$option"'[[:space:]=]+//i' \
	   /etc/ssh/sshd_config
}

sshd_host_keys_required() {
	hostkeys="$(sshd_get_config_option HostKey)"
	if [ "$hostkeys" ]; then
		echo "$hostkeys"
	else
		# No HostKey directives at all, so the server picks some
		# defaults depending on the setting of Protocol.
		protocol="$(sshd_get_config_option Protocol)"
		[ "$protocol" ] || protocol=1,2
		if echo "$protocol" | grep 1 >/dev/null; then
			echo /etc/ssh/ssh_host_key
		fi
		if echo "$protocol" | grep 2 >/dev/null; then
			echo /etc/ssh/ssh_host_rsa_key
			echo /etc/ssh/ssh_host_dsa_key
			echo /etc/ssh/ssh_host_ecdsa_key
			echo /etc/ssh/ssh_host_ed25519_key
		fi
	fi
}

sshd_create_key() {
	msg="$1"
	shift
	hostkeys="$1"
	shift
	file="$1"
	shift

	if echo "$hostkeys" | grep -x "$file" >/dev/null && \
	   [ ! -f "$file" ] ; then
		echo -n $msg
		ssh-keygen -q -f "$file" -N '' "$@" -A
		echo
		if type restorecon >/dev/null 2>&1; then
			restorecon "$file.pub"
		fi
	fi
}


sshd_create_keys() {
	hostkeys="$(sshd_host_keys_required)"

	sshd_create_key "Creating SSH1 key; this may take some time ..." \
		"$hostkeys" /etc/ssh/ssh_host_key -t rsa1

	sshd_create_key "Creating SSH2 RSA key; this may take some time ..." \
		"$hostkeys" /etc/ssh/ssh_host_rsa_key -t rsa
	sshd_create_key "Creating SSH2 DSA key; this may take some time ..." \
		"$hostkeys" /etc/ssh/ssh_host_dsa_key -t dsa
	sshd_create_key "Creating SSH2 ECDSA key; this may take some time ..." \
		"$hostkeys" /etc/ssh/ssh_host_ecdsa_key -t ecdsa
	sshd_create_key "Creating SSH2 Ed25519 key; this may take some time ..." \
		"$hostkeys" /etc/ssh/ssh_host_ed25519_key -t ed25519
}

case "$1" in
start)
	mount -oremount,rw /
	mount -t proc proc /proc
	mount -t sysfs sysfs /sys

	depmod -a

	FLG_INIT=false
	FLG_FORCE_CONFIG=false
	FLG_3LAYER_MODE=false

	union_fs=unionfs

	# execute watchdog timer daemon before DEB_CONFIG
	case "$MODEL" in
	obsbx1)
		if ! grep -q "^10" /etc/debian_version ; then
			/etc/init.d/wd-keepalive start
		fi
		;;
	*)
		;;
	esac

	# check init sw
	grep -q 'noflashcfg=1' /proc/cmdline && FLG_INIT=true

	# check cf with LABEL=${CONFIG_LABEL}
	confdev=`findfs LABEL=${CONFIG_LABEL} 2> /dev/null`
	if [ -n "$confdev" ] ; then
		mount -o ro $confdev $CONFIG_DEV_MTPT
		[ -f "/mnt/FORCE" ] && FLG_FORCE_CONFIG=true	
	fi

	# check cf with LABEL=${RW_CF_LABEL}
	rwdev=`findfs LABEL=${RW_CF_LABEL} 2> /dev/null`
	rodev=`findfs LABEL=${RO_CF_LABEL} 2> /dev/null`
	if grep -q 'noeasyblocks=1' /proc/cmdline ; then
		rwdev=""
		rodev=""
	fi


	# check aufs support
	if grep -q overlay /proc/filesystems ; then
		union_fs=overlay
	elif grep -q aufs /proc/filesystems ; then
		union_fs=aufs
	fi


	mkdir -p ${RW_DIR}
	[ -n rodev ] && mkdir -p ${RO_DIR}

	# for easyblocks check
	# 3layer mode
	if [ -n "$rodev" ] ; then
		fsck -C -a $rodev 2> /dev/null
		mount -o ro $rodev ${RO_DIR}
		[ -e "${RO_DIR}/etc/easyblocks" ] && FLG_INIT=false
		umount ${RO_DIR}
	# 2layer mode
	elif [ -n "$rwdev" ] ; then
		fsck -C -a $rwdev 2> /dev/null
		mount -o ro $rwdev ${RW_DIR}
		[ -e "${RW_DIR}/etc/easyblocks" ] && FLG_INIT=false
		umount ${RW_DIR}
	fi


	# check 3layer mode
	if [ -n "$rodev" ]; then
		mount -o ro $rodev ${RO_DIR}
		[ -e "${RO_DIR}/DEBIAN" ] && FLG_3LAYER_MODE=true; mkdir -p ${RO_DIR}
		umount ${RO_DIR}
	fi

	# 3layer mode
	if [ "$FLG_3LAYER_MODE" == "true" ] && [ "$FLG_INIT" != "true" ]; then
		if [ -n "$rwdev" ]; then
			mount $rwdev ${RW_DIR}
		else
			mount -t tmpfs -o size=${RW_TMPFS_SIZE} tmpfs ${RW_DIR}
			rwdev=""
		fi
		mount $rodev ${RO_DIR}

		if [ "${FLG_INIT}" == "true" ] ; then
			echo "Running by default configuration..."
		elif [ "${FLG_FORCE_CONFIG}" == "true" ] ; then
			echo "Don't extract files in FlashROM..."
		else
			case $MODEL in
			obsbx1|obsvx1|obsix9|obshx?|obsa16|obsfx?|obsgx4|obsduo)
				restore_func
			;;
			esac
		fi
	elif [ -z "$rwdev" ] || [ "${FLG_INIT}" == "true" ]; then
		mount -t tmpfs -o size=${RW_TMPFS_SIZE} tmpfs ${RW_DIR}

		if [ "${FLG_INIT}" == "true" ] ; then
			echo "Running by default configuration..."
		elif [ "${FLG_FORCE_CONFIG}" == "true" ] ; then
			echo "Don't extract files in FlashROM..."
		else
			case $MODEL in
			obsbx1|obsvx1|obsix9|obshx?|obsa16|obsfx?|obsgx4|obsduo)
				restore_func
			;;
			esac
		fi

	else
		if [ "${FLG_FORCE_CONFIG}" == "true" ];then
			fdisk_and_mke2fs $rwdev
		fi

		mount $rwdev ${RW_DIR}

	fi

	[ -f ${RW_DIR}/etc/default/openblocks ] && \
		. ${RW_DIR}/etc/default/openblocks

	if [ -z "$rwdev" ] ; then
		mount -o remount,size=${RW_TMPFS_SIZE} ${RW_DIR}
	else
		remount_opt=
		if fsck -N $rwdev | grep -q "ext4" ; then
			remount_opt="$remount_opt discard"
		fi
		if [ "$NOATIME" == "true" ] ; then
			remount_opt="$remount_opt noatime"
		fi
		_remount_opt="$(echo $remount_opt|sed -e 's# #,#')"

		[ -n "$_remount_opt" ] && \
			mount -oremount,$_remount_opt ${RW_DIR}
	fi


	# extract CONFIG_FILE and execute CONFIG_SCRIPT
	if [ -n "$confdev" ] ; then
		case $MODEL in
		obsvx1|obsix9|obshx*)
			/etc/init.d/dbus start
			if_exists_extract_config_file
			if_exists_execute_config_script
			/etc/init.d/dbus stop
			;;
		*)
			if_exists_extract_config_file
			if_exists_execute_config_script
			;;
		esac
	fi

	# if using DEBIAN storage, /tmp directory mount under storage.
	#if [ -n "$rwdev" ] ; then
	#	UNIONFS_DIRS="$UNIONFS_DIRS tmp"
	#fi

	# mount filesystems
	for dir in ${UNIONFS_DIRS} ; do
		mawk '$1 !~ /^#/ {print $2}' < /etc/fstab | grep -q "^/$dir" && continue
		mkdir -p ${RW_DIR}/$dir
		[ -n $rodev ] && mkdir -p ${RO_DIR}/$dir
		case $union_fs in
		overlay)
			mkdir -p ${RW_DIR}/work/$dir
			if [ "$FLG_3LAYER_MODE" == "true" ] ; then
				mount -n -t ${union_fs} \
					-o lowerdir=${RO_DIR}/$dir:$dir,upperdir=${RW_DIR}/$dir,workdir=${RW_DIR}/work/$dir ${union_fs} /$dir
			else
			mount -n -t ${union_fs} \
				-o lowerdir=$dir,upperdir=${RW_DIR}/$dir,workdir=${RW_DIR}/work/$dir ${union_fs} /$dir
			fi
		;;
		*)
			if [ "$unionfs" == "aufs" ]; then
				xino_opt="xino=/.aufs.xino.$dir,trunc_xino,"
				case $MODEL in
				obsvx1|obsix9|obshx*)
					xino_opt+="acl,"
					;;
				*) ;;
				esac
			fi
			if [ "$FLG_3LAYER_MODE" == "true" ] ; then
				mount -n -t ${union_fs} \
					-o ${xino_opt}dirs=${RW_DIR}/$dir=rw:${RO_DIR}/$dir:/$dir=ro ${union_fs} /$dir
			else
			mount -n -t ${union_fs} \
				-o ${xino_opt}dirs=${RW_DIR}/$dir=rw:/$dir=ro ${union_fs} /$dir
			fi
		;;
		esac
	done
	[ -n "$rodev" ] && \
			mount -oremount,ro,$_remount_opt ${RO_DIR}

	# for Measures to rename network interface
	rm -f /etc/udev/rules.d/70-persistent-net.rules

	rm -rf /etc/network/run
	ln -sf /run/network /etc/network/run

	# create ssh keys for openssh-server
	if [ -x /usr/sbin/sshd ] ; then
		case "$MODEL" in
		obsbx1)
			if [ -x /usr/sbin/rngd ] ; then
				rngd -r /dev/urandom
			fi
			;;
		esac
		ssh-keygen -N '' -A
	fi

	# create mount directory for fstab
	mawk '/\/[a-zA-Z0-9]+/ {print $2}' /etc/fstab | xargs mkdir -p

	# make directory tree
	mkdir_mtree_list

	# exectute postscript and unmount DEB_CONFIG storage.
	if [ -n "$confdev" ] ; then
		if_exists_execute_config_postscript
		umount $confdev
	fi

	# reload inittab 
	kill -1 1

	# correct for debian7
	ln -sf /proc/mounts /etc/mtab

	# S35390A INIT2 flag clear
	if [ "$MODEL" == "obsbx1" ]; then
		obs-hwclock --check
		if [ $? == 0 ]; then
			/usr/local/sbin/hwclock --clearint2
			date -s "`/usr/local/sbin/hwclock --hctosys`"
			/usr/local/sbin/hwclock --status
		fi
	fi
	umount /proc
	umount /sys
	mount -oremount,ro / > /dev/null 2>&1
;;
stop)
;;
esac

set +x

exit 0
